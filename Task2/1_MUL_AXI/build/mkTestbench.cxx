/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Wed Dec 30 13:27:02 CET 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"


/* String declarations */
static std::string const __str_literal_1("Error: \"src/Testbench.bsv\", line 31, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l31c17] and\n  [RL_action_l35c28, RL_action_l36c26, RL_action_f_update_l31c17] ) fired in\n  the same clock cycle.\n",
					 232u);
static std::string const __str_literal_2("Error: \"src/Testbench.bsv\", line 35, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l35c28] and\n  [RL_action_l36c26, RL_action_f_update_l31c17] ) fired in the same clock\n  cycle.\n",
					 207u);
static std::string const __str_literal_3("Error: \"src/Testbench.bsv\", line 36, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l36c26] and\n  [RL_action_f_update_l31c17] ) fired in the same clock cycle.\n",
					 187u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    INST_testCounter(simHdl, "testCounter", this, 32u, 0u, (tUInt8)0u),
    INST_testVec_0(simHdl, "testVec_0", this, 11llu, 11llu, 121llu),
    INST_testVec_1(simHdl, "testVec_1", this, 10llu, 12llu, 120llu),
    INST_testVec_2(simHdl, "testVec_2", this, 13llu, 123llu, 1599llu),
    INST_testVec_3(simHdl, "testVec_3", this, 50llu, 101llu, 5050llu),
    INST_testVec_4(simHdl, "testVec_4", this, 160llu, 30llu, 4800llu),
    INST_testVec_5(simHdl, "testVec_5", this, 2llu, 11llu, 22llu),
    INST_testVec_6(simHdl, "testVec_6", this, 13llu, 13llu, 169llu),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 42u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[3u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[4u], "RL_action_f_init_l31c17", SYM_RULE);
  init_symbol(&symbols[5u], "RL_action_f_update_l31c17", SYM_RULE);
  init_symbol(&symbols[6u], "RL_action_l35c28", SYM_RULE);
  init_symbol(&symbols[7u], "RL_action_l36c26", SYM_RULE);
  init_symbol(&symbols[8u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[9u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[10u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[11u], "RL_idle_l31c17", SYM_RULE);
  init_symbol(&symbols[12u], "RL_idle_l31c17_1", SYM_RULE);
  init_symbol(&symbols[13u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[14u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[15u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[16u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[17u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[18u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[19u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[20u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[21u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[22u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[23u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[24u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[25u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[26u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[27u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[28u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[29u], "testCounter", SYM_MODULE, &INST_testCounter);
  init_symbol(&symbols[30u], "testVec_0", SYM_MODULE, &INST_testVec_0);
  init_symbol(&symbols[31u], "testVec_1", SYM_MODULE, &INST_testVec_1);
  init_symbol(&symbols[32u], "testVec_2", SYM_MODULE, &INST_testVec_2);
  init_symbol(&symbols[33u], "testVec_3", SYM_MODULE, &INST_testVec_3);
  init_symbol(&symbols[34u], "testVec_4", SYM_MODULE, &INST_testVec_4);
  init_symbol(&symbols[35u], "testVec_5", SYM_MODULE, &INST_testVec_5);
  init_symbol(&symbols[36u], "testVec_6", SYM_MODULE, &INST_testVec_6);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_action_f_init_l31c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l31c17,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_action_f_update_l31c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l31c17,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_action_l35c28",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l35c28,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_action_l36c26",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l36c26,
	      1u);
  init_symbol(&symbols[41u], "x__h14998", SYM_DEF, &DEF_x__h14998, 32u);
}


/* Rule actions */

void MOD_mkTestbench::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTestbench::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTestbench::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h2559;
  DEF_state_can_overlap__h2559 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2559);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTestbench::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTestbench::RL_action_f_init_l31c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_testCounter.METH_write(0u);
}

void MOD_mkTestbench::RL_action_l35c28()
{
  tUInt8 DEF_testCounter_6_EQ_0___d61;
  tUInt8 DEF_testCounter_6_EQ_1___d62;
  tUInt8 DEF_testCounter_6_EQ_2___d63;
  tUInt8 DEF_testCounter_6_EQ_3___d64;
  tUInt8 DEF_testCounter_6_EQ_4___d65;
  tUInt8 DEF_testCounter_6_EQ_5___d66;
  tUInt8 DEF_testCounter_6_EQ_6___d67;
  DEF_x__h14998 = INST_testCounter.METH_read();
  DEF_testCounter_6_EQ_6___d67 = DEF_x__h14998 == 6u;
  DEF_testCounter_6_EQ_5___d66 = DEF_x__h14998 == 5u;
  DEF_testCounter_6_EQ_4___d65 = DEF_x__h14998 == 4u;
  DEF_testCounter_6_EQ_3___d64 = DEF_x__h14998 == 3u;
  DEF_testCounter_6_EQ_2___d63 = DEF_x__h14998 == 2u;
  DEF_testCounter_6_EQ_1___d62 = DEF_x__h14998 == 1u;
  DEF_testCounter_6_EQ_0___d61 = DEF_x__h14998 == 0u;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (DEF_testCounter_6_EQ_0___d61)
    INST_testVec_0.METH_go();
  if (DEF_testCounter_6_EQ_1___d62)
    INST_testVec_1.METH_go();
  if (DEF_testCounter_6_EQ_2___d63)
    INST_testVec_2.METH_go();
  if (DEF_testCounter_6_EQ_3___d64)
    INST_testVec_3.METH_go();
  if (DEF_testCounter_6_EQ_4___d65)
    INST_testVec_4.METH_go();
  if (DEF_testCounter_6_EQ_5___d66)
    INST_testVec_5.METH_go();
  if (DEF_testCounter_6_EQ_6___d67)
    INST_testVec_6.METH_go();
}

void MOD_mkTestbench::RL_action_l36c26()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_action_f_update_l31c17()
{
  tUInt32 DEF_testCounter_6_PLUS_1___d82;
  DEF_x__h14998 = INST_testCounter.METH_read();
  DEF_testCounter_6_PLUS_1___d82 = DEF_x__h14998 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_testCounter.METH_write(DEF_testCounter_6_PLUS_1___d82);
}

void MOD_mkTestbench::RL_idle_l31c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_idle_l31c17_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTestbench::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTestbench::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l31c17 && ((DEF_WILL_FIRE_RL_action_l35c28 || DEF_WILL_FIRE_RL_action_l36c26) || DEF_WILL_FIRE_RL_action_f_update_l31c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTestbench::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l35c28 && (DEF_WILL_FIRE_RL_action_l36c26 || DEF_WILL_FIRE_RL_action_f_update_l31c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkTestbench::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l36c26 && DEF_WILL_FIRE_RL_action_f_update_l31c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_testVec_6.reset_RST_N(ARG_rst_in);
  INST_testVec_5.reset_RST_N(ARG_rst_in);
  INST_testVec_4.reset_RST_N(ARG_rst_in);
  INST_testVec_3.reset_RST_N(ARG_rst_in);
  INST_testVec_2.reset_RST_N(ARG_rst_in);
  INST_testVec_1.reset_RST_N(ARG_rst_in);
  INST_testVec_0.reset_RST_N(ARG_rst_in);
  INST_testCounter.reset_RST(ARG_rst_in);
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
  INST_testCounter.dump_state(indent + 2u);
  INST_testVec_0.dump_state(indent + 2u);
  INST_testVec_1.dump_state(indent + 2u);
  INST_testVec_2.dump_state(indent + 2u);
  INST_testVec_3.dump_state(indent + 2u);
  INST_testVec_4.dump_state(indent + 2u);
  INST_testVec_5.dump_state(indent + 2u);
  INST_testVec_6.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 19u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l31c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l31c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l35c28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l36c26", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h14998", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  num = INST_testCounter.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_testVec_0.dump_VCD_defs(l);
    num = INST_testVec_1.dump_VCD_defs(l);
    num = INST_testVec_2.dump_VCD_defs(l);
    num = INST_testVec_3.dump_VCD_defs(l);
    num = INST_testVec_4.dump_VCD_defs(l);
    num = INST_testVec_5.dump_VCD_defs(l);
    num = INST_testVec_6.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l31c17) != DEF_WILL_FIRE_RL_action_f_init_l31c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l31c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l31c17 = DEF_WILL_FIRE_RL_action_f_init_l31c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l31c17) != DEF_WILL_FIRE_RL_action_f_update_l31c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l31c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l31c17 = DEF_WILL_FIRE_RL_action_f_update_l31c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l35c28) != DEF_WILL_FIRE_RL_action_l35c28)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l35c28, 1u);
	backing.DEF_WILL_FIRE_RL_action_l35c28 = DEF_WILL_FIRE_RL_action_l35c28;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l36c26) != DEF_WILL_FIRE_RL_action_l36c26)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l36c26, 1u);
	backing.DEF_WILL_FIRE_RL_action_l36c26 = DEF_WILL_FIRE_RL_action_l36c26;
      }
      ++num;
      if ((backing.DEF_x__h14998) != DEF_x__h14998)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h14998, 32u);
	backing.DEF_x__h14998 = DEF_x__h14998;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l31c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l31c17 = DEF_WILL_FIRE_RL_action_f_init_l31c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l31c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l31c17 = DEF_WILL_FIRE_RL_action_f_update_l31c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l35c28, 1u);
      backing.DEF_WILL_FIRE_RL_action_l35c28 = DEF_WILL_FIRE_RL_action_l35c28;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l36c26, 1u);
      backing.DEF_WILL_FIRE_RL_action_l36c26 = DEF_WILL_FIRE_RL_action_l36c26;
      vcd_write_val(sim_hdl, num++, DEF_x__h14998, 32u);
      backing.DEF_x__h14998 = DEF_x__h14998;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
  INST_testCounter.dump_VCD(dt, backing.INST_testCounter);
}

void MOD_mkTestbench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  INST_testVec_0.dump_VCD(dt, levels, backing.INST_testVec_0);
  INST_testVec_1.dump_VCD(dt, levels, backing.INST_testVec_1);
  INST_testVec_2.dump_VCD(dt, levels, backing.INST_testVec_2);
  INST_testVec_3.dump_VCD(dt, levels, backing.INST_testVec_3);
  INST_testVec_4.dump_VCD(dt, levels, backing.INST_testVec_4);
  INST_testVec_5.dump_VCD(dt, levels, backing.INST_testVec_5);
  INST_testVec_6.dump_VCD(dt, levels, backing.INST_testVec_6);
}
